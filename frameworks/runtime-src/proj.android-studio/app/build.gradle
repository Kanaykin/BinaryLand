import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion "26.0.1"

    packagingOptions {
        exclude 'lib/x86/libadcolony.so'
        exclude 'lib/x86/libjs.so'
        exclude 'lib/x86_64/libadcolony.so'
        exclude 'lib/x86_64/libjs.so'
        exclude 'lib/arm64-v8a/libadcolony.so'
        exclude 'lib/arm64-v8a/libjs.so'
        exclude 'lib/armeabi-v7a/libadcolony.so'
        exclude 'lib/armeabi-v7a/libjs.so'
    }

    defaultConfig {
        applicationId "com.MyCompany.BinaryLand"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 11
        versionName "2.1"
        multiDexEnabled  true

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2dlua'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM

                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    sourceSets.main {
        java
        {
            srcDir "src"
            // exclude 'src/org/myextend/FacebookADS.java'
            // exclude 'src/org/myextend/FacebookStatistic.java'
        }
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

def getCocosCommandPath() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'cocos.bat'
    }
    else {
        // on unix like system, can not get environments variables easily
        // so run a shell script to get environment variable sets by cocos2d-x setup.py
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = project.file('get_environment.sh')
                standardOutput = os
            }
            ext.console_path = os.toString().trim()
        }
        return new File(console_path + '/cocos').absolutePath;
    }
}

// a method used to invoke the cocos luacompile command
def compileLua(srcDir, dstDir, doCompile, is64bit, doEncrypt) {
    def compileArgs = ['luacompile', '-s', srcDir, '-d', dstDir]
    if (!doCompile) {
        compileArgs << '--disable-compile'
    }
    else if (is64bit) {
        compileArgs << '--bytecode-64bit'
    }

    if (doEncrypt) {
        compileArgs << '-e'
        compileArgs << '-k'
        compileArgs << project.property('PROP_LUA_ENCRYPT_KEY')
        compileArgs << '-b'
        compileArgs << project.property('PROP_LUA_ENCRYPT_SIGN')
    }

    // commandLine compileArgs
    println 'running command : ' + 'cocos ' + compileArgs.join(' ')
    exec {
        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
        executable getCocosCommandPath()
        args compileArgs
    }

    // remove the lua files in dstDir
    delete fileTree(dstDir) {
        include '**/*.lua'
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
           from "${buildDir}/../../../../../res"
           into "${buildDir}/intermediates/assets/${variant.dirName}/res"
        }

        copy {
            from "${buildDir}/../../../../../src"
            into "${buildDir}/intermediates/assets/${variant.dirName}/src"
        }

        copy {
            from "${buildDir}/../../../../cocos2d-x/cocos/scripting/lua-bindings/script"
            into  "${buildDir}/intermediates/assets/${variant.dirName}/script"
        }

        // compile & encrypt the scripts if necessary
        def compileScript = (variant.name.compareTo('release') == 0)
        if (project.hasProperty('PROP_COMPILE_SCRIPT')) {
            compileScript = (PROP_COMPILE_SCRIPT.compareTo('1') == 0)
        }

        def encryptLua = project.hasProperty('PROP_LUA_ENCRYPT') && (PROP_LUA_ENCRYPT.compareTo('1') == 0)
        if (compileScript || encryptLua) {
            // -1 means not build bytecode
            // 0 means build 32bit only
            // 1 means build 64bit only
            // 2 means build both 32bit & 64bit
            def buildType = -1
            if (compileScript) {
                def need64 = false
                def need32 = false
                def abis = PROP_APP_ABI.split(':').collect{it as String}
                abis.each{ abi->
                    if (abi.compareTo('arm64-v8a') == 0) {
                        need64 = true
                    }
                    else
                    {
                        need32 = true
                    }
                }

                if (need64 && need32) {
                    buildType = 2
                }
                else if (need64) {
                    buildType = 1
                }
                else {
                    buildType = 0
                }
            }

            // invoke cocos command to compile & encrypt the lua files
            switch (buildType) {
                case -1:
                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
                               false, false, encryptLua)
                    break
                case 0:
                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
                               true, false, encryptLua)
                    break
                case 1:
                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
                               "${buildDir}/intermediates/assets/${variant.dirName}/src/64bit",
                               true, true, encryptLua)

                    // remove the lua files in src dir
                    delete fileTree("${buildDir}/intermediates/assets/${variant.dirName}/src") {
                        include '**/*.lua'
                    }
                    delete "${buildDir}/intermediates/assets/${variant.dirName}/src/cocos"
                    break
                case 2:
                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
                               "${buildDir}/intermediates/assets/${variant.dirName}/src/64bit",
                               true, true, encryptLua)
                    compileLua("${buildDir}/intermediates/assets/${variant.dirName}/src",
                               "${buildDir}/intermediates/assets/${variant.dirName}/src",
                               true, false, encryptLua)
                    break
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    compile 'com.facebook.android:audience-network-sdk:4.28.0'
    compile 'com.facebook.android:facebook-android-sdk:4.28.0'
    compile 'com.android.support:support-v4:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0' 
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.google.android.gms:play-services-plus:15.0.1'
    compile 'com.google.android.gms:play-services-analytics:16.0.1'
    compile 'com.google.android.gms:play-services-games:15.0.1'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.google.android.ads.consent:consent-library:1.0.4'
    compile 'com.squareup.picasso:picasso:2.5.2' //for Inmobi
    compile name: 'adcolony-sdk-3.2.1', ext: 'aar'
    compile name: 'mmedia-6.4.0', ext: 'aar'
    compile name: 'mobvista_alphab', ext: 'aar'
    compile name: 'mobvista_appwall', ext: 'aar'
    compile name: 'mobvista_appwallext', ext: 'aar'
    compile name: 'mobvista_common', ext: 'aar'
    compile name: 'mobvista_interstitial', ext: 'aar'
    compile name: 'mobvista_mvdownloads', ext: 'aar'
    compile name: 'mobvista_mvjscommon', ext: 'aar'
    compile name: 'mobvista_mvnative', ext: 'aar'
    compile name: 'mobvista_nativeex', ext: 'aar'
    compile name: 'mobvista_offerwall', ext: 'aar'
    compile name: 'mobvista_playercommon', ext: 'aar'
    compile name: 'mobvista_reward', ext: 'aar'
    compile name: 'mobvista_videocommon', ext: 'aar'
    compile name: 'mobvista_videofeeds', ext: 'aar'
}
